# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ApplicationState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, component=None, preview=None, parameters=None, created=None):  # noqa: E501
        """ApplicationState - a model defined in OpenAPI

        :param id: The id of this ApplicationState.  # noqa: E501
        :type id: str
        :param component: The component of this ApplicationState.  # noqa: E501
        :type component: str
        :param preview: The preview of this ApplicationState.  # noqa: E501
        :type preview: str
        :param parameters: The parameters of this ApplicationState.  # noqa: E501
        :type parameters: object
        :param created: The created of this ApplicationState.  # noqa: E501
        :type created: datetime
        """
        self.openapi_types = {
            'id': str,
            'component': str,
            'preview': str,
            'parameters': object,
            'created': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'component': 'component',
            'preview': 'preview',
            'parameters': 'parameters',
            'created': 'created'
        }

        self._id = id
        self._component = component
        self._preview = preview
        self._parameters = parameters
        self._created = created

    @classmethod
    def from_dict(cls, dikt) -> 'ApplicationState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApplicationState of this ApplicationState.  # noqa: E501
        :rtype: ApplicationState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ApplicationState.


        :return: The id of this ApplicationState.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationState.


        :param id: The id of this ApplicationState.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def component(self):
        """Gets the component of this ApplicationState.


        :return: The component of this ApplicationState.
        :rtype: str
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this ApplicationState.


        :param component: The component of this ApplicationState.
        :type component: str
        """
        if component is None:
            raise ValueError("Invalid value for `component`, must not be `None`")  # noqa: E501

        self._component = component

    @property
    def preview(self):
        """Gets the preview of this ApplicationState.


        :return: The preview of this ApplicationState.
        :rtype: str
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this ApplicationState.


        :param preview: The preview of this ApplicationState.
        :type preview: str
        """

        self._preview = preview

    @property
    def parameters(self):
        """Gets the parameters of this ApplicationState.


        :return: The parameters of this ApplicationState.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ApplicationState.


        :param parameters: The parameters of this ApplicationState.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def created(self):
        """Gets the created of this ApplicationState.


        :return: The created of this ApplicationState.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ApplicationState.


        :param created: The created of this ApplicationState.
        :type created: datetime
        """

        self._created = created
