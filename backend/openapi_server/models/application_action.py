# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ApplicationAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, source=None, target=None, time=None, type=None, parameters=None):  # noqa: E501
        """ApplicationAction - a model defined in OpenAPI

        :param id: The id of this ApplicationAction.  # noqa: E501
        :type id: str
        :param source: The source of this ApplicationAction.  # noqa: E501
        :type source: str
        :param target: The target of this ApplicationAction.  # noqa: E501
        :type target: str
        :param time: The time of this ApplicationAction.  # noqa: E501
        :type time: datetime
        :param type: The type of this ApplicationAction.  # noqa: E501
        :type type: str
        :param parameters: The parameters of this ApplicationAction.  # noqa: E501
        :type parameters: object
        """
        self.openapi_types = {
            'id': str,
            'source': str,
            'target': str,
            'time': datetime,
            'type': str,
            'parameters': object
        }

        self.attribute_map = {
            'id': 'id',
            'source': 'source',
            'target': 'target',
            'time': 'time',
            'type': 'type',
            'parameters': 'parameters'
        }

        self._id = id
        self._source = source
        self._target = target
        self._time = time
        self._type = type
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt) -> 'ApplicationAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApplicationAction of this ApplicationAction.  # noqa: E501
        :rtype: ApplicationAction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ApplicationAction.


        :return: The id of this ApplicationAction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationAction.


        :param id: The id of this ApplicationAction.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def source(self):
        """Gets the source of this ApplicationAction.


        :return: The source of this ApplicationAction.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ApplicationAction.


        :param source: The source of this ApplicationAction.
        :type source: str
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this ApplicationAction.


        :return: The target of this ApplicationAction.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ApplicationAction.


        :param target: The target of this ApplicationAction.
        :type target: str
        """

        self._target = target

    @property
    def time(self):
        """Gets the time of this ApplicationAction.


        :return: The time of this ApplicationAction.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ApplicationAction.


        :param time: The time of this ApplicationAction.
        :type time: datetime
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def type(self):
        """Gets the type of this ApplicationAction.


        :return: The type of this ApplicationAction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApplicationAction.


        :param type: The type of this ApplicationAction.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def parameters(self):
        """Gets the parameters of this ApplicationAction.


        :return: The parameters of this ApplicationAction.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ApplicationAction.


        :param parameters: The parameters of this ApplicationAction.
        :type parameters: object
        """

        self._parameters = parameters
